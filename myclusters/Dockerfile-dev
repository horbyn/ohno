# 用来创建 cni 开发环境
# docker buildx build --load --platform linux/arm64 --build-arg ARCH=aarch64 -t ohno-dev:latest <PATH_TO_DOCKERFILE>
# docker run -d --privileged --platform linux/arm64 --name cni -v <PATH_TO_REPO>:/ohno -w /ohno ohno-dev:latest /sbin/init
# docker exec -it cni /bin/bash

FROM ubuntu:jammy

# 禁止交互式时区设置参考：https://serverfault.com/a/1016972
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# x86_64 或 aarch64
ARG ARCH

RUN apt-get update && apt install -y --no-install-recommends ca-certificates && \
    cp /etc/apt/sources.list /etc/apt/sources.list.bak && \
    if [ "$ARCH" = "aarch64" ]; then \
        sed -i -e 's@//ports.ubuntu.com/\? @//ports.ubuntu.com/ubuntu-ports @g' \
            -e 's@//ports.ubuntu.com@//mirrors.ustc.edu.cn@g' \
            /etc/apt/sources.list; \
    elif [ "$ARCH" = "x86_64" ]; then \
        sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list; \
        sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list; \
        sed -i 's/http:/https:/g' /etc/apt/sources.list; \
    else \
        echo "未知架构，无法设置 apt 代理"; \
        exit 1; \
    fi && \
    apt-get update && apt install -y --no-install-recommends \
        sudo vim wget curl git build-essential gdb systemd tzdata init pkg-config plocate tree zsh language-pack-en \
        # 探测相关
        iputils-ping iproute2 tcpdump lsof iptables etcd-client \
        # 静态检查、火焰图依赖、内存检查、单元测试相关
        clang-tidy linux-tools-common linux-tools-generic valgrind gcovr \
        # eBPF 相关
        clang libelf1 libelf-dev zlib1g-dev \
        # 第三方库依赖
        libboost-all-dev libssl-dev libgrpc-dev libgrpc++-dev libprotobuf-dev protobuf-compiler-grpc libcpprest-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    # 中文
    sed -i -e 's/# zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    # 安装 zsh
    git clone https://github.com/ohmyzsh/ohmyzsh.git /root/.oh-my-zsh && \
    cp /root/.oh-my-zsh/templates/zshrc.zsh-template /root/.zshrc && \
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting && \
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions && \
    chsh -s $(which zsh) && \
    sed -i 's/^plugins=(git)$/plugins=(git wd zsh-syntax-highlighting zsh-autosuggestions)/' ~/.zshrc && \
    # 创建调试版 gdb
    printf '#!/bin/bash\n\nsudo /usr/bin/gdb $@' > /usr/bin/gdb_sudo && \
    chmod +x /usr/bin/gdb_sudo && \
    # 安装 cmake
    cd /home && \
    export CMAKE_V=3.31.6 && \
    wget "https://github.com/Kitware/CMake/releases/download/v$CMAKE_V/cmake-$CMAKE_V-linux-$ARCH.tar.gz" && \
    tar -xzf "cmake-$CMAKE_V-linux-$ARCH.tar.gz" && \
    cd "cmake-$CMAKE_V-linux-$ARCH" && \
    ln -s `pwd`/bin/cmake /usr/bin/ && \
    ln -s `pwd`/bin/ctest /usr/bin/ && \
    cd .. && \
    rm -rf "cmake-$CMAKE_V-linux-$ARCH.tar.gz" && \
    # 火焰图依赖
    if [ ! -d "/usr/lib/linux-tools" ]; then \
        echo "错误：/usr/lib/linux-tools 目录不存在！" >&2; \
        exit 1; \
    fi && \
    for dir in /usr/lib/linux-tools/*-*-generic; do \
        if [ -x "$dir/perf" ]; then \
            ln -sf "$dir/perf" /usr/bin/perf; \
            echo "创建软链接: /usr/bin/perf → $dir/perf"; \
            break; \
        fi; \
    done; \
    # 验证链接
    if [ ! -L /usr/bin/perf ]; then \
        echo "错误: 未找到可执行的 perf 文件" >&2; \
        exit 1; \
    fi && \
    # mac 全局忽略 .DS_Store 配置文件
    # ref to: https://orianna-zzo.github.io/sci-tech/2018-01/mac%E4%B8%ADgit%E5%BF%BD%E7%95%A5.ds_store%E6%96%87%E4%BB%B6/
    echo "# Mac OS specified" > ~/.gitignore_global && \
    echo "**/.DS_Store" > ~/.gitignore_global && \
    git config --global core.excludesfile ~/.gitignore_global

CMD ["/bin/bash"]
